[
  {
    "id": 1376,
    "task": {
      "id": 1324,
      "text": "Базовые и производные типы данных. Иерархия определений типов данных и вложенности компонент переменных. Контекстный способ определения типа данных в Си. Абстрактный тип данных. Спецификация typedef.",
      "taskType": "QUESTION",
      "themeName": "Тип данных и переменная"
    },
    "number": 1,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1377,
    "task": {
      "id": 1302,
      "text": "Время жизни и область действия переменных. Классификация. Определение и объявление переменных. Внешние, автоматические и статические переменные. Область действия функций. Внешние и статические функции.",
      "taskType": "QUESTION",
      "themeName": "Модульная организация программы"
    },
    "number": 2,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1378,
    "task": {
      "id": 1346,
      "text": "Статическое связывание. Библиотеки. Заголовочные файлы, их назначение и содержание. Файл проекта в классическом программировании.",
      "taskType": "QUESTION",
      "themeName": "Модульное программирование"
    },
    "number": 3,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1379,
    "task": {
      "id": 1323,
      "text": "Указатель как элемент архитектуры компьютера. Синтаксис указателя в Си. Указатель и ссылка. Передача формальных параметров и результата по значению и по ссылке.",
      "taskType": "QUESTION",
      "themeName": "Указатели"
    },
    "number": 4,
    "state": "IN_PROGRESS",
    "rating": 0
  },
  {
    "id": 1380,
    "task": {
      "id": 1288,
      "text": "Указатели и массивы. Способы работы через указатель с массивом.",
      "taskType": "QUESTION",
      "themeName": "Адресная арифметика"
    },
    "number": 5,
    "state": "SENT",
    "rating": 0
  },
  {
    "id": 1381,
    "task": {
      "id": 1345,
      "text": "Динамические переменные и массивы. Операторы и функции управления динамической памятью.",
      "taskType": "QUESTION",
      "themeName": "Динамическая память"
    },
    "number": 6,
    "state": "CHECKING",
    "rating": 0
  },
  {
    "id": 1382,
    "task": {
      "id": 1325,
      "text": "Способы формирования массивов указателей - статические, динамические, смешанные. Работа с массивами указателей.",
      "taskType": "QUESTION",
      "themeName": "Массивы указателей"
    },
    "number": 7,
    "state": "RATED",
    "rating": 1
  },
  {
    "id": 1383,
    "task": {
      "id": 1347,
      "text": "Определение элемента списка. Способы формирования списков. Односвязные списки.   Двусвязные (циклические) списки.",
      "taskType": "QUESTION",
      "themeName": "Списки"
    },
    "number": 8,
    "state": "NO_RATING",
    "rating": 0
  },
  {
    "id": 1384,
    "task": {
      "id": 1283,
      "text": "Рекурсивная структура данных и функция. Реализация рекурсивных функций, роль стека. Инвариант рекурсивной функции. Особенности разработки рекурсивных алгоритмов. Смысл локальных и глобальных переменных, формальных и фактических параметров в рекурсивной функции. Способы накопления результата.",
      "taskType": "QUESTION",
      "themeName": "Рекурсия"
    },
    "number": 9,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1385,
    "task": {
      "id": 1322,
      "text": "Способы представления деревьев. Полный рекурсивный обход дерева (для всех способов представления).Алгоритмы, основанные на полном рекурсивном обходе дерева.",
      "taskType": "QUESTION",
      "themeName": "Деревья"
    },
    "number": 10,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1386,
    "task": {
      "id": 1284,
      "text": "Его определение в языке и назначение. Указатель на функцию - формальный параметр. Динамическое связывание. Пример - численное интегрирование.",
      "taskType": "QUESTION",
      "themeName": "Указатель на функцию"
    },
    "number": 11,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1387,
    "task": {
      "id": 1343,
      "text": "Двоичный и текстовый файл. Запись. Последовательный и произвольный доступ. Текстовый файл. Позиционирование в текстовом файле. Пример - создание \"закладок\" в файле.",
      "taskType": "QUESTION",
      "themeName": "Файл"
    },
    "number": 12,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1388,
    "task": {
      "id": 1281,
      "text": "Понятие формата. Пример: сохранение и загрузка дерева в последовательный ДФ.",
      "taskType": "QUESTION",
      "themeName": "Последовательный двоичный файл"
    },
    "number": 13,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1389,
    "task": {
      "id": 1349,
      "text": "Понятие записи и ключа. Линейный и двоичный поиск. Трудоемкость алгоритмов сортировки и поиска. Классификация сортировок: выбор, вставка, обмен, подсчет, разделение, слияние.",
      "taskType": "QUESTION",
      "themeName": "Сортировка и поиск"
    },
    "number": 14,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1390,
    "task": {
      "id": 1342,
      "text": "Способы представления деревьев. Полный рекурсивный обход, ветвление. Алгоритмы, основанные на полном рекурсивном обходе дерева. Эффективность алгоритмов на деревьях.",
      "taskType": "QUESTION",
      "themeName": "Деревья"
    },
    "number": 15,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1391,
    "task": {
      "id": 1289,
      "text": "Свойства и методы (функции) класса. Синтаксическое и технологическое определение класса. Технология ООП. Программирование от функции к функции и от класса к классу. \"Эпизодическое\" и \"тотальное\" ООП.",
      "taskType": "QUESTION",
      "themeName": "Определение класса и объекта"
    },
    "number": 16,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1392,
    "task": {
      "id": 1321,
      "text": "Иерархия объектов. Базовый и производный классы. Наследование данных и методов. Наследование как основа программирования \"от класса к классу\". Объектно-ориентированные библиотеки, работа с ними с использованием наследования. Наследование. Способы наследования методов: полное наследование, перекрытие, частичное (условное) наследование. Конструирование объектов вложенных классов.",
      "taskType": "QUESTION",
      "themeName": "Наследование"
    },
    "number": 17,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1393,
    "task": {
      "id": 1341,
      "text": "Назначение закрытых и открытых данных и методов. Дружественность. Конструктор и деструктор. Глобальные, локальные и динамические объекты.",
      "taskType": "QUESTION",
      "themeName": "Закрытая и общая части класса"
    },
    "number": 18,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1394,
    "task": {
      "id": 1287,
      "text": "Виртуальная функция как основа для создания интерфейсов. Абстрактные базовые классы. Виртуальная функция как элемент \"отложенного\" программирования.",
      "taskType": "QUESTION",
      "themeName": "Внешний и внутренний полиморфизм"
    },
    "number": 19,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1395,
    "task": {
      "id": 1285,
      "text": "Параметры шаблонов. Примеры шаблонов структур данных: стек, очередь, список. Требования к объектам - параметрам шаблонов.",
      "taskType": "QUESTION",
      "themeName": "Шаблон как макроопределение класса"
    },
    "number": 20,
    "state": "NO_ANSWER",
    "rating": 0
  },
  {
    "id": 1396,
    "task": {
      "id": 1267,
      "text": "Задачу реализовать в виде функции, получающей все данные через параметры. Все структуры данных - динамические.\nЗамечания по выполняемым операциям. Объединение - результат содержит элементы из двух исходных структур данных (СД), элемент, присутствующий в обеих СД, включается в одном экземпляре. Пересечение - результат содержит элементы, одновременно присутствующие в обеих структурах данных. Разность - результат содержит элементы из первой СД, которые отсутствуют во второй.\nПересечение двух циклических списков.",
      "taskType": "EXERCISE",
      "themeName": "Двусвязные списки"
    },
    "number": 1,
    "state": "NO_ANSWER",
    "rating": 0
  }
]